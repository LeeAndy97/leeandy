#Include "Tlpp-Core.th"
#Include "Tlpp-Rest.th"
#Include "Protheus.ch"

#Define enter Chr(13) + Chr(10)

/*/{Protheus.doc} NeoCredit
    Classe rest para integração com a NeoCredit
    @type class
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 12/05/2022
    /*/
Class NeoCredit

    // Construtor
    public Method New() CONSTRUCTOR

    // Endpoint para retorno de análise/reanalise de crédito do cliente realizada pela Neocredit (webhook)
    @Post("neocredit/resultado-analise-credito/:cFilEmpresa")
    public Method PostResultadoAnaliseCredito()

    // Endpoint para retorno de análise/reanalise de pedido realizada pela Neocredit (webhook)
    @Post("neocredit/resultado-analise-pedido/:cFilEmpresa")
    public Method PostResultadoAnalisePedido()

    // Endpoint para retorno de análise proativa de cliente realizada pela Neocredit (webhook)
    @Post("neocredit/resultado-analise-proativa/:cFilEmpresa")
    public Method PostResultadoAnaliseProativa()

    // Endpoint para consulta de dados cadastrais e financeiros de clientes
    @Get("neocredit/consulta-historico/:cFilEmpresa")
    // @Get("neocredit/consulta-historico")
    public Method GetConsultaHistorico()

    // Endpoint para consulta de e-mail do cliente
    @Get("neocredit/consulta-email/:cFilEmpresa")
    // @Get("neocredit/consulta-email")
    public Method GetConsultaEmail()

    // Endpoint para consulta de telefone do cliente
    @Get("neocredit/consulta-telefone/:cFilEmpresa")
    // @Get("neocredit/consulta-telefone")
    public Method GetConsultaTelefone()

    // Endpoint para consulta de e-mail do cliente
    @Get("neocredit/consulta-endereco/:cFilEmpresa")
    // @Get("neocredit/consulta-endereco")
    public Method GetConsultaEndereco()

    // Endpoint para consulta de e-mail do cliente
    @Get("neocredit/consulta-dados-cliente/:cFilEmpresa")
    public Method GetConsultaDadosCliente()

EndClass

/*/{Protheus.doc} NeoCredit::New
    Contrutor da classe
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 12/05/2022
    @return variant, return_description
    /*/
Method New() Class NeoCredit
Return


/*/{Protheus.doc} NeoCredit::PostResultadoAnaliseCredito
    Retorna análise/reanálise de crédito do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 12/05/2022
    @return variant, return_description
    /*/
Method PostResultadoAnaliseCredito() Class NeoCredit

    // retorno do processo
    Local lRet              := .T.
    Local nX
    // código de erro
    Local cCodErro          := 200  // OK
    // body json
    Local jBody             := JsonObject():new()
    Local jHeader           := JsonObject():new()
    Local jParams           := JsonObject():new()
    // body retorno
    Local jResponse         := JsonObject():new()
    Local cStatAprov        := ""
    Local cMensagemPolitica := ""
    Local lCredito          := .T.
    Local lAvalCred         := .T.
    Local lEstoque          := .T.
	Local nQtdLib           := 0

    Private cErrorLog         := ""
    Private bLastError        := {|oError| cErrorLog := oError:Description + oError:ErrorStack, Break(oError)}
    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jBody:FromJson(oRest:GetBodyRequest())
    jParams := oRest:getPathParamsRequest()

    
    ErrorBlock(bLastError)

    Begin Sequence

        // validações
        If jBody:ToJson() != "{}"
            
            // valida se recebeu o código identificador da empresa
            If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

                If jHeader:HasProperty("recno") .and. !Empty(jHeader['recno'])

                    // empresa para consulta
                    cFilAnt   := AllTrim(jParams['cFilEmpresa'])
                    nRecnoZN1 := Val(jHeader['recno'])

                    // dados do body
                    cDocumento              := DecodeUtf8(AllTrim(jBody['documento']))          // CPF/CNPJ
                    cCodCliente             := DecodeUtf8(AllTrim(jBody['idCliente']))          // Identificação do cliente
                    cPedido                 := DecodeUtf8(AllTrim(jBody['idPedido']))           // Identificação do pedido
                    cStatAprov              := DecodeUtf8(AllTrim(jBody['status']))             // Status do Processo
                    cRisco                  := DecodeUtf8(AllTrim(jBody['risco']))              // Classificação de risco do cliente
                    nValorLimiteAprovado    := jBody['limiteAprovado']                          // Valor de limite aprovado
                    cDivisao                := DecodeUtf8(AllTrim(jBody['divisao']))            // Divisão
                    nScore                  := jBody['score']                                   // Score
                    dValidadeLimite         := If( jBody:HasProperty('dataValidadeLimite'), CToD(jBody['dataValidadeLimite']), SToD(''))                // Data de validade do limite ("dd/mm/aaaa")
                    lPossuiRestricao        := jBody['possuiRestricao']                             // Indicador se possui restrição
                    cMovimentacaoSerasa     := DecodeUtf8(AllTrim(jBody['movimentacaoSerasa'])) // Movimentação Serasa
                    nValorTotalPago         := jBody['valorTotalPago']                          // Valor total pago
                    nPercLimiteDisponivel   := jBody['percentualLimiteDisponivel']              // Percentual limite disponível
                    nMediaAtraso            := jBody['mediaAtraso']                             // Média de atraso
                    dPrimeiraCompra         := CToD(jBody['dataPrimeiraCompra'])                // Data primeira compra ("dd/mm/aaaa")
                    cLimiteSugerido         := DecodeUtf8(AllTrim(jBody['limiteSugerido']))     // Sugestão de limite política
                    lPossuiLimiteVencido    := jBody['possuiTituloVencido']                     // Indicador se possui título vencido
                    dEntradaSocio           := CToD(jBody['dataQSA'])                           // Data entrada sócio ("dd/mm/aaaa")
                    aMensagemPolitica       := jBody['mensagensPolitica']                       // Mensagens Política
                    cLinkRelatorio          := DecodeUtf8(AllTrim(jBody['urlRelatorio']))       // Link do Relatório

                    // tratamento mensagens
                    For nX := 1 To Len(aMensagemPolitica)
                        cMensagemPolitica += DecodeUtf8(AllTrim(aMensagemPolitica[nX])) + enter
                    Next

                    // grava log
                    fLogMsg("Rertorno de analise de CREDITO de cliente " + cDocumento + " da NeoCredit.", "01")
                    
                    DbSelectArea("SA1")
                    SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                    If SA1->(DbSeek(FWxFilial("SA1") + PadR(cDocumento, TamSX3("A1_CGC")[1]) ))
                        RecLock("SA1", .F.)
                            SA1->A1_RISCO   := cRisco
                            SA1->A1_LC      := nValorLimiteAprovado
                            If !Empty(dValidadeLimite)
                                SA1->A1_VENCLC  := dValidadeLimite
                            EndIf
                            SA1->A1_ZLNKREL := cLinkRelatorio
                            
                            // flag que indica ter efetuado uma análise inicial do cliente
                            If !SA1->A1_ZINTNEO
                                SA1->A1_ZINTNEO := .T.
                            EndIf

                            If !Empty(cMensagemPolitica)
                                // SA1->A1_ZPARFIN := AllTrim(SA1->A1_ZPARFIN) + enter + "[" + DToC(Date()) + "-" + Time() + "] - Retorno Neocredit Consulta Cliente: " + cMensagemPolitica
                                SA1->A1_ZPARFIN := AllTrim(SA1->A1_ZPARFIN) + enter + "[NEOCREDIT] - " + cMensagemPolitica
                            EndIf
                        SA1->(MsUnlock())
                    EndIf

                    DbSelectArea("ZN1")
                    ZN1->(DbGoTo(nRecnoZN1))
                    RecLock("ZN1", .F.)
                        ZN1->ZN1_STATUS := cStatAprov
                        ZN1->ZN1_RISCO  := cRisco
                        ZN1->ZN1_VLLMTA := nValorLimiteAprovado
                        ZN1->ZN1_SCORE  := nScore
                        ZN1->ZN1_DTVLDL := dValidadeLimite
                        ZN1->ZN1_RESTRI := lPossuiRestricao
                        ZN1->ZN1_SERASA := cMovimentacaoSerasa
                        ZN1->ZN1_VLRPAG := nValorTotalPago
                        ZN1->ZN1_PLIMDI := nPercLimiteDisponivel
                        ZN1->ZN1_MEDATR := nMediaAtraso
                        ZN1->ZN1_PRCOMP := dPrimeiraCompra
                        ZN1->ZN1_LIMSUG := cLimiteSugerido
                        ZN1->ZN1_PLIMVE := lPossuiLimiteVencido
                        ZN1->ZN1_DTESOC := dEntradaSocio
                        ZN1->ZN1_MENPOL := cMensagemPolitica
                        // ZN1->ZN1_RETANA := "C"                  // Indica de qual webhook veio a analise (C=Cliente; P=Pedido; A=Proativo)
                        ZN1->ZN1_DTRETO := Date()
                        ZN1->ZN1_HRRETO := Time()
                        ZN1->ZN1_JRETOR := DecodeUtf8(jBody:ToJson())
                        ZN1->ZN1_MENSAG := "ANÁLISE RETORNADA"
                        ZN1->ZN1_LNKREL := cLinkRelatorio
                    ZN1->(MsUnlock())

                    // se não houver informação de pedido, foi enviado somente o cliente para análise
                    If !Empty(ZN1->ZN1_PEDIDO)

                        DbSelectArea("SC5")
                        SC5->(DbSetOrder(1))    // 1- C5_FILIAL, C5_NUM, R_E_C_N_O_, D_E_L_E_T_

                        DbSelectArea("SC6")
                        SC6->(DbSetOrder(1))	// 1- C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO, R_E_C_N_O_, D_E_L_E_T_

                        DbSelectArea("SC9")
                        SC9->(DbSetOrder(1))	// 1- C9_FILIAL + C9_PEDIDO + C9_ITEM, R_E_C_N_O_, D_E_L_E_T_

                        // posiciona no pedido de venda
                        If SC5->(DbSeek(FWxFilial("SC5") + ZN1->ZN1_PEDIDO))

                            // atualiza etapa conforme retorno da neocredit
                            If cStatAprov == "APROVADO"
                                // grava status integração
                                RecLock("ZN1", .F.)
                                    ZN1->ZN1_MENSAG := "PEDIDO LIBERADO"
                                ZN1->(MsUnlock())

                                // libera crédito
                                lCredito  := .F.        // TODO temporário devido à analise de crédito por parte da neocredit não estar 100% correta
                                // não avalia crédito
                                lAvalCred := .F.

                                // // atualiza etapa do pedido conforme regras.
                                // U_UpStepPV("NEOCREDIT-APROVADO")
                                
                                // grava log
                                fLogMsg("Pedido de venda liberado! Retorno da analise: " + cStatAprov, "02")

                            ElseIf cStatAprov == "DERIVAR"
                                // grava status integração
                                RecLock("ZN1", .F.)
                                    ZN1->ZN1_MENSAG := "PEDIDO DERIVAR"
                                ZN1->(MsUnlock())
                                
                                // não libera crédito
                                lCredito := .F.
                                // não avalia crédito
                                lAvalCred := .F.
                                
                                // // atualiza etapa do pedido conforme regras.
                                // U_UpStepPV("NEOCREDIT-DERIVAR")

                                // grava log
                                fLogMsg("Pedido de venda nao liberado por limite de credito inferior! Retorno da analise: " + cStatAprov, "03")

                            Else
                                // grava status integração
                                RecLock("ZN1", .F.)
                                    ZN1->ZN1_MENSAG := "PEDIDO REPROVADO"
                                ZN1->(MsUnlock())
                                
                                // não libera crédito
                                lCredito := .F.
                                // não avalia crédito
                                lAvalCred := .F.
                                
                                // // atualiza etapa do pedido conforme regras.
                                // U_UpStepPV("NEOCREDIT-REPROVADO")

                                // grava log
                                fLogMsg("Pedido de venda nao liberado por limite de credito inferior! Retorno da analise: " + cStatAprov, "04")
                            EndIf

                            // realiza liberação de crédito
                            If SC6->(DbSeek(FWxFilial('SC6') + SC5->C5_NUM))

                                Begin Transaction

                                    // percorre todos os itens
                                    While ! SC6->(Eof()) .And. SC6->C6_FILIAL == FWxFilial('SC6') .And. SC6->C6_NUM == SC5->C5_NUM

                                        nQtdLib := 0
                                        // posiciona na liberação do item do pedido e estorna a liberação, pois gera liberação automática
                                        If SC9->(DbSeek(FWxFilial('SC9')+SC6->C6_NUM+SC6->C6_ITEM))
                                            While  !SC9->(Eof()) .AND. SC9->(C9_FILIAL+C9_PEDIDO+C9_ITEM) == FWxFilial('SC9')+SC6->(C6_NUM+C6_ITEM)
                                                // soma quantidade liberada para reliberar a mesma quantidade (pedidos de entrega futura liberam parcialmente)
                                                nQtdLib += SC9->C9_QTDLIB
                                                
                                                // remove liberação
                                                SC9->(a460Estorna())
                                                SC9->(DbSkip())
                                            EndDo
                                        Else
                                            nQtdLib := SC6->C6_QTDVEN
                                        EndIf

                                        // Recno Item
                                        // Quantidade a liberar
                                        // Libera crédito
                                        // Libera estoque
                                        // Permite analisar o crédito
                                        // Permite analisar o estoque
                                        // Ajusta quantidade conforme disponível
                                        MaLibDoFat(SC6->(Recno()), nQtdLib, @lCredito, @lEstoque, lAvalCred, .T., .F.)

                                        SC6->(DbSkip())
                                    End

                                    // libera SC5
                                    MaLiberOk({SC5->C5_NUM}, .F.)

                                End Transaction
                            EndIf

                            // // atualiza a etapa conforme regras padrões (cai bloqueio de crédito ou segue para listagem)
                            // U_UpStepPV("NEOCREDIT")

                        EndIf
                    EndIf

                    jResponse["message"] := "Recebido retorno de analise de crédito de cliente."
                    
                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Parâmetro de recno (header params) não informado."
                    // grava log
                    fLogMsg(jResponse["message"], "05")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "Parâmetro da empresa (path params) não informado."
                // grava log
                fLogMsg(jResponse["message"], "06")
            EndIf
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Não foi possível ler o conteúdo do body."
            // grava log
            fLogMsg(jResponse["message"], "07")
        EndIf

    Recover

        lRet                 := .F.
        cCodErro             := 500 // Bad Request
        jResponse["message"] := "Erro interno: " + cErrorLog
        // grava log
        fLogMsg(jResponse["message"], "08")
    End Sequence


    // If !Empty(cErrorLog)
    //     vrainfo("ERRRRRROOOOOOOOO", cErrorLog)

    //     lRet                 := .F.
    //     cCodErro             := 500 // Bad Request
    //     jResponse["message"] := "Erro interno: " + cErrorLog
    //     // grava log
    //     FwLogMsg("INFO", /*cTransactionId*/, "NEOCREDIT", FunName(), "", "05", jResponse["message"], 0, 0, {})
    // EndIf

    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.

/*/{Protheus.doc} NeoCredit::PostResultadoAnalisePedido
    Retorna análise/reanálise de pedido
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 13/05/2022
    @return variant, return_description
    /*/
Method PostResultadoAnalisePedido() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    Local nX
    Local cMensagemPolitica := ""
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jBody          := JsonObject():new()
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()
    Local lCredito          := .T.
    Local lAvalCred         := .T.
    Local lEstoque          := .T.
	Local nQtdLib           := 0

    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jBody:FromJson(oRest:GetBodyRequest())
    jParams := oRest:getPathParamsRequest()


    // validações
    If jHeader:ToJson() != "{}" .and. jBody:ToJson() != "{}"
        
        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa']) ;
            
            If jHeader:HasProperty("recno") .and. !Empty(jHeader['recno'])
                
                // carrega a filial correta
                cFilAnt   := AllTrim(jParams['cFilEmpresa'])
                nRecnoZN1 := Val(jHeader['recno'])

                // dados do body
                cDocumento              := DecodeUtf8(AllTrim(jBody['documento']))          // CPF/CNPJ
                cStatAprov              := DecodeUtf8(AllTrim(jBody['status']))             // Status do Processo
                cRisco                  := If(jBody:HasProperty('risco'), DecodeUtf8(AllTrim(jBody['risco'])), "")                  // Classificação de risco do cliente
                nValorLimiteAprovado    := If(jBody:HasProperty('limiteAprovado'), jBody['limiteAprovado'], 0)                      // Valor de limite aprovado
                dValidadeLimite         := If(jBody:HasProperty('dataValidadeLimite'), CToD(jBody['dataValidadeLimite']), SToD("")) // Data de validade do limite ("dd/mm/aaaa")
                nValorTotalPago         := jBody['valorTotalPago']                          // Valor total pago
                nPercLimiteDisponivel   := jBody['percentualLimiteDisponivel']              // Percentual limite disponível
                nMediaAtraso            := jBody['mediaAtraso']                             // Média de atraso
                dPrimeiraCompra         := CToD(jBody['dataPrimeiraCompra'])                // Data primeira compra ("dd/mm/aaaa")
                lPossuiLimiteVencido    := jBody['possuiTituloVencido']                     // Indicador se possui título vencido
                aMensagemPolitica       := jBody['mensagensPolitica']                       // Mensagens Política
                cLinkRelatorio          := DecodeUtf8(AllTrim(jBody['urlRelatorio']))       // Link do Relatório

                // tratamento mensagens
                For nX := 1 To Len(aMensagemPolitica)
                    cMensagemPolitica += DecodeUtf8(AllTrim(aMensagemPolitica[nX])) + enter
                Next

                // grava log
                fLogMsg("Rertorno de analise de PEDIDO de cliente " + cDocumento + " da NeoCredit.", "01")
                
                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cDocumento, TamSX3("A1_CGC")[1]) ))
                    RecLock("SA1", .F.)
                        If !Empty(cRisco)
                            SA1->A1_RISCO   := cRisco
                        EndIf
                        If nValorLimiteAprovado > 0
                            SA1->A1_LC      := nValorLimiteAprovado
                        EndIf
                        If !Empty(dValidadeLimite)
                            SA1->A1_VENCLC  := dValidadeLimite
                        EndIf

                        If !Empty(cMensagemPolitica)
                            // SA1->A1_ZPARFIN += enter + "[" + DToC(Date()) + "-" + Time() + "] - Retorno Neocredit Consulta Pedido: " + cMensagemPolitica + enter
                            SA1->A1_ZPARFIN := AllTrim(SA1->A1_ZPARFIN) + enter + "[NEOCREDIT] - " + cMensagemPolitica
                        EndIf

                        // gravar na SC5
                        // SA1->A1_ZLNKREL := cLinkRelatorio
                    SA1->(MsUnlock())
                EndIf
                
                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                SA1->(DbSeek(FWxFilial("SA1") + PadR(cDocumento, TamSX3("A1_CGC")[1]) ))

                DbSelectArea("ZN1")
                ZN1->(DbGoTo(nRecnoZN1))
                RecLock("ZN1", .F.)
                    ZN1->ZN1_STATUS := cStatAprov
                    ZN1->ZN1_RISCO  := cRisco
                    ZN1->ZN1_VLLMTA := nValorLimiteAprovado
                    ZN1->ZN1_DTVLDL := dValidadeLimite
                    ZN1->ZN1_VLRPAG := nValorTotalPago
                    ZN1->ZN1_PLIMDI := nPercLimiteDisponivel
                    ZN1->ZN1_MEDATR := nMediaAtraso
                    ZN1->ZN1_PRCOMP := dPrimeiraCompra
                    ZN1->ZN1_PLIMVE := lPossuiLimiteVencido
                    ZN1->ZN1_MENPOL := cMensagemPolitica
                    // ZN1->ZN1_RETANA := "P"                  // Indica de qual webhook veio a analise (C=Cliente; P=Pedido; A=Proativo)
                    ZN1->ZN1_DTRETO := Date()
                    ZN1->ZN1_HRRETO := Time()
                    ZN1->ZN1_JRETOR := DecodeUtf8(jBody:ToJson())
                    ZN1->ZN1_MENSAG := "ANÁLISE RETORNADA"
                    ZN1->ZN1_LNKREL := cLinkRelatorio
                ZN1->(MsUnlock())


                DbSelectArea("SC5")
                SC5->(DbSetOrder(1))

                DbSelectArea("SC6")
                SC6->(DbSetOrder(1))	// 1- C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO, R_E_C_N_O_, D_E_L_E_T_

                DbSelectArea("SC9")
                SC9->(DbSetOrder(1))	// 1- C9_FILIAL + C9_PEDIDO + C9_ITEM, R_E_C_N_O_, D_E_L_E_T_

                // posiciona no pedido de venda
                If SC5->(DbSeek(FWxFilial("SC5") + ZN1->ZN1_PEDIDO))

                    // atualiza etapa conforme retorno da neocredit
                    If cStatAprov == "APROVADO"
                        // grava status integração
                        RecLock("ZN1", .F.)
                            ZN1->ZN1_MENSAG := "PEDIDO LIBERADO"
                        ZN1->(MsUnlock())

                        // libera crédito
                        lCredito  := .T.
                        // não avalia crédito
                        lAvalCred := .F.

                        // // atualiza etapa do pedido conforme regras.
                        // U_UpStepPV("NEOCREDIT-APROVADO")
                        
                        // grava log
                        fLogMsg("Pedido de venda liberado! Retorno da analise: " + cStatAprov, "02")

                    ElseIf cStatAprov == "DERIVAR"
                        // grava status integração
                        RecLock("ZN1", .F.)
                            ZN1->ZN1_MENSAG := "PEDIDO DERIVAR"
                        ZN1->(MsUnlock())
                        
                        // não libera crédito
                        lCredito := .F.
                        // não avalia crédito
                        lAvalCred := .F.
                        
                        // // atualiza etapa do pedido conforme regras.
                        // U_UpStepPV("NEOCREDIT-DERIVAR")

                        // grava log
                        fLogMsg("Pedido de venda nao liberado por limite de credito inferior! Retorno da analise: " + cStatAprov, "03")

                    Else
                        // grava status integração
                        RecLock("ZN1", .F.)
                            ZN1->ZN1_MENSAG := "PEDIDO REPROVADO"
                        ZN1->(MsUnlock())
                        
                        // não libera crédito
                        lCredito  := .F.
                        // naõ avalia crédito
                        lAvalCred := .F.
                        
                        // // atualiza etapa do pedido conforme regras.
                        // U_UpStepPV("NEOCREDIT-REPROVADO")

                        // grava log
                        fLogMsg("Pedido de venda nao liberado por limite de credito inferior! Retorno da analise: " + cStatAprov, "04")
                    EndIf

                    // realiza liberação de crédito
                    If SC6->(DbSeek(FWxFilial('SC6') + SC5->C5_NUM))

                        Begin Transaction

                            // percorre todos os itens
                            While ! SC6->(Eof()) .And. SC6->C6_FILIAL == FWxFilial('SC6') .And. SC6->C6_NUM == SC5->C5_NUM

                                nQtdLib := 0
                                // posiciona na liberação do item do pedido e estorna a liberação, pois gera liberação automática
                                If SC9->(DbSeek(FWxFilial('SC9')+SC6->C6_NUM+SC6->C6_ITEM))
                                    While !SC9->(Eof()) .AND. SC9->(C9_FILIAL+C9_PEDIDO+C9_ITEM) == FWxFilial('SC9')+SC6->(C6_NUM+C6_ITEM)
                                        // soma quantidade liberada para reliberar a mesma quantidade (pedidos de entrega futura liberam parcialmente)
                                        nQtdLib += SC9->C9_QTDLIB
                                        
                                        // remove liberação
                                        SC9->(a460Estorna())
                                        SC9->(DbSkip())
                                    EndDo
                                Else
                                    nQtdLib := SC6->C6_QTDVEN
                                EndIf

                                // Recno Item
                                // Quantidade a liberar
                                // Libera crédito
                                // Libera estoque
                                // Permite analisar o crédito
                                // Permite analisar o estoque
                                // Ajusta quantidade conforme disponível
                                MaLibDoFat(SC6->(Recno()), nQtdLib, @lCredito, @lEstoque, lAvalCred, .T., .F.)

                                SC6->(DbSkip())
                            End

                            // libera SC5
                            MaLiberOk({SC5->C5_NUM}, .F.)

                        End Transaction
                    EndIf

                    // // atualiza etapa conforme retorno da neocredit
                    // If lCredito .and. cStatAprov == "APROVADO"
                    //     // grava status integração
                    //     RecLock("ZN1", .F.)
                    //         ZN1->ZN1_MENSAG := "PEDIDO LIBERADO"
                    //     ZN1->(MsUnlock())

                    //     // atualiza etapa do pedido conforme regras.
                    //     U_UpStepPV("NEOCREDIT-APROVADO")
                        
                    //     // grava log
                    //     FwLogMsg("INFO", /*cTransactionId*/, "NEOCREDIT", FunName(), "", "05", "Pedido de venda liberado!", 0, 0, {})
                    // Else
                    //     // grava status integração
                    //     RecLock("ZN1", .F.)
                    //         ZN1->ZN1_MENSAG := "PEDIDO BLOQUEADO"
                    //     ZN1->(MsUnlock())
                        
                    //     // atualiza etapa do pedido conforme regras.
                    //     U_UpStepPV("NEOCREDIT-REPROVADO")

                    //     // grava log
                    //     FwLogMsg("INFO", /*cTransactionId*/, "NEOCREDIT", FunName(), "", "05", "Pedido de venda nao liberado por limite de credito inferior!", 0, 0, {})
                    // EndIf

                    
                    // // atualiza a etapa conforme regras padrões (cai bloqueio de crédito ou segue para listagem)
                    // U_UpStepPV("NEOCREDIT")

                EndIf

                jResponse["message"] := "Recebido retorno de analise do pedido."
                
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "Parâmetro de recno (header params) não informado."
                // grava log
                fLogMsg(jResponse["message"], "05")
            EndIf
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa (path params) não informado."
            // grava log
            fLogMsg(jResponse["message"], "06")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "07")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.

/*/{Protheus.doc} NeoCredit::PostResultadoAnaliseProativa
    Retorna análise proativa do cliente
        Retorna avaliação básica do cliente que está perto do vencimento
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 02/06/2023
    @return variant, return_description
    /*/
Method PostResultadoAnaliseProativa() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    Local nX
    Local cMensagemPolitica := ""
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jBody          := JsonObject():new()
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()

    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jBody:FromJson(oRest:GetBodyRequest())
    jParams := oRest:getPathParamsRequest()

    // VarInfo("jHeader", jHeader)
    // VarInfo("jBody", jBody)
    // VarInfo("jParams", jParams)

    // validações
    If jHeader:ToJson() != "{}" .and. jBody:ToJson() != "{}"
        
        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa']) ;
            
            If jHeader:HasProperty("recno") .and. !Empty(jHeader['recno'])
                
                // carrega a filial correta
                cFilAnt   := AllTrim(jParams['cFilEmpresa'])
                nRecnoZN1 := Val(jHeader['recno'])

                // dados do body
                cDocumento              := DecodeUtf8(AllTrim(jBody:GetJsonObject('documento')))          // CPF/CNPJ
                cStatAprov              := DecodeUtf8(AllTrim(jBody:GetJsonObject('status')))             // Status do Processo
                dValidadeLimite         := If(jBody:HasProperty('dataValidadeLimite') .and. !Empty(jBody:GetJsonObject('dataValidadeLimite')), CToD(jBody:GetJsonObject('dataValidadeLimite')), SToD("")) // Data de validade do limite ("dd/mm/aaaa")
                aMensagemPolitica       := jBody:GetJsonObject('mensagensPolitica')                       // Mensagens Política
                cLinkRelatorio          := DecodeUtf8(AllTrim(jBody:GetJsonObject('urlRelatorio')))       // Link do Relatório

                // tratamento mensagens
                For nX := 1 To Len(aMensagemPolitica)
                    cMensagemPolitica += DecodeUtf8(AllTrim(aMensagemPolitica[nX])) + enter
                Next
                
                // grava log
                fLogMsg("Rertorno de analise PROATIVA de cliente " + cDocumento + " da NeoCredit.", "01")
                
                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cDocumento, TamSX3("A1_CGC")[1]) ))
                    RecLock("SA1", .F.)
                        If !Empty(dValidadeLimite)
                            SA1->A1_VENCLC  := dValidadeLimite
                        EndIf

                        If !Empty(cMensagemPolitica)
                            SA1->A1_ZPARFIN := AllTrim(SA1->A1_ZPARFIN) + enter + "[NEOCREDIT] - " + cMensagemPolitica
                        EndIf

                    SA1->(MsUnlock())
                EndIf
                
                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                SA1->(DbSeek(FWxFilial("SA1") + PadR(cDocumento, TamSX3("A1_CGC")[1]) ))

                DbSelectArea("ZN1")
                ZN1->(DbGoTo(nRecnoZN1))
                RecLock("ZN1", .F.)
                    ZN1->ZN1_STATUS := cStatAprov
                    ZN1->ZN1_DTVLDL := dValidadeLimite
                    ZN1->ZN1_MENPOL := cMensagemPolitica
                    // ZN1->ZN1_RETANA := "A"                  // Indica de qual webhook veio a analise (C=Cliente; P=Pedido; A=Proativo)
                    ZN1->ZN1_DTRETO := Date()
                    ZN1->ZN1_HRRETO := Time()
                    ZN1->ZN1_JRETOR := DecodeUtf8(jBody:ToJson())
                    ZN1->ZN1_MENSAG := "ANÁLISE RETORNADA"
                    ZN1->ZN1_LNKREL := cLinkRelatorio
                ZN1->(MsUnlock())

                jResponse["message"] := "Recebido retorno de analise proativa."
                
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "Parâmetro de recno (header params) não informado."
                // grava log
                fLogMsg(jResponse["message"], "02")
            EndIf
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa (path params) não informado."
            // grava log
            fLogMsg(jResponse["message"], "03")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "04")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.

/*/{Protheus.doc} NeoCredit::GetConsultaHistorico
    Consulta de dados cadastrais e financeiros do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 13/05/2022
    @return variant, return_description
    /*/
Method GetConsultaHistorico() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    Local nX
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()
    Local cAliasTmp      := GetNextAlias()
    Local cAliasTmpMATR  := GetNextAlias()
    // datas
    Local cDt24Meses     := DToS(MonthSub(Date(), 24))
    Local cDt12Meses     := DToS(MonthSub(Date(), 12))
    Local cDt06Meses     := DToS(MonthSub(Date(), 6))
    // tipos de títulos de fatura
    // Local cTipos := FormatIn('NF,CCS', ',')  // títulos tipo CCS foram importados do Consistem
    Local cTipos         := FormatIn(MVRECANT+","+MV_CRNEG+","+MVABATIM+","+MVIRABT+","+MVFUABT+","+MVINABT+","+MVISABT+","+MVPIABT+","+MVCFABT+","+MVPROVIS+',CCS,CNC', ',')  // títulos tipo CCS foram importados do Consistem
    // empresas
    Local aEmpresas      := {}
    Local cQuery         := ""

    Private oPrint
    Private oFile
    Private oFileErase

    // empresas integradas
    aadd(aEmpresas, {"9901", "Teste", "FER"})
    aadd(aEmpresas, {"9902", "Teste2", "JJI"})
    // aadd(aEmpresas, {"0301", "METALNOX", "PZ"})

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jParams := oRest:getPathParamsRequest()


    If(Select(cAliasTmp) > 0, (cAliasTmp)->(DbCloseArea()), )
    If(Select(cAliasTmpMATR) > 0, (cAliasTmpMATR)->(DbCloseArea()), )

    // validações
    If jHeader:ToJson() != "{}"

        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

            // empresa para consulta
            cFilAnt   := AllTrim(jParams['cFilEmpresa'])
            // cFilAnt   := "0202"
        
            // valida se recebeu o código identificador do cliente
            If jHeader:HasProperty("cnpj") .and. !Empty(jHeader['cnpj']) .and. (Len(AllTrim(jHeader['cnpj'])) == 11 .or. Len(AllTrim(jHeader['cnpj'])) == 14)

                // dados do cpf/cnpj
                cCGC := AllTrim(jHeader['cnpj'])

                // grava log
                fLogMsg("Cliente " + cCGC + " analise de historico.", "01")

                // realiza o calculo da média de atraso do cliente, pois o padrão está considerando CNC no cálculo (Exemplo: cliente 028334)
                // cQueryMETR :=         " DECLARE @nA1_METR FLOAT = 0 "
                // cQueryMETR += enter + " BEGIN "
                // cQueryMETR += enter + " 	SELECT @nA1_METR = (@nA1_METR * CAST((ROW_NUMBER() OVER(ORDER BY E1_EMISSAO) - 1) AS FLOAT) + CAST(DATEDIFF(day, E1_VENCREA, E1_BAIXA) AS FLOAT) ) / CAST(ROW_NUMBER() OVER(ORDER BY E1_EMISSAO) AS FLOAT) "
                // cQueryMETR += enter + "     FROM " + RetSQLTab("SE1") + " INNER JOIN " + RetSQLTab("SA1")
                // cQueryMETR += enter + " 			ON " + RetSQLCond("SE1")
                // cQueryMETR += enter + " 				AND E1_CLIENTE = A1_COD 
                // cQueryMETR += enter + " 				AND E1_LOJA = A1_LOJA 
                // cQueryMETR += enter + " 				AND E1_TIPO NOT IN " + cTipos
                // cQueryMETR += enter + " 				AND (E1_FATURA = '' OR SUBSTRING(E1_FATURA,1,6) = 'NOTFAT') 
                // cQueryMETR += enter + " 				AND E1_BAIXA <> ''
                // cQueryMETR += enter + "     WHERE " + RetSQLCond("SA1")
                // cQueryMETR += enter + " AND A1_MSBLQL <> '1' "  // não bloqueado
                // cQueryMETR += enter + " AND A1_CGC = '" + cCGC + "' "
                // cQueryMETR += enter + " END "

                // ----- CALCULA MÉDIA DE ATRASOS
                // realiza o calculo da média de atraso do cliente, pois o padrão está considerando CNC no cálculo (Exemplo: cliente 028334)

                cQueryMETR :=         " SELECT DATEDIFF(day, E1_VENCREA, E1_BAIXA) AS DIASATRASO"
                cQueryMETR += enter + "     FROM " + RetSQLTab("SE1") + " INNER JOIN " + RetSQLTab("SA1")
                cQueryMETR += enter + " 			ON " + RetSQLCond("SE1")
                cQueryMETR += enter + " 				AND E1_CLIENTE = A1_COD 
                cQueryMETR += enter + " 				AND E1_LOJA = A1_LOJA 
                cQueryMETR += enter + " 				AND E1_TIPO NOT IN " + cTipos
                cQueryMETR += enter + " 				AND (E1_FATURA = '' OR SUBSTRING(E1_FATURA,1,6) = 'NOTFAT') 
                cQueryMETR += enter + " 				AND E1_BAIXA <> ''
                cQueryMETR += enter + "     WHERE " + RetSQLCond("SA1")
                // cQueryMETR += enter + " AND A1_MSBLQL <> '1' "  // não bloqueado
                cQueryMETR += enter + " AND A1_CGC = '" + cCGC + "' "

                DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQueryMETR),cAliasTmpMATR,.F.,.T.)

                nMediaAtrasos := 0
                nCount := 0
                While !(cAliasTmpMATR)->(Eof())
                    nCount++

                    // calculo da média
                    nMediaAtrasos := ( nMediaAtrasos * (nCount - 1) + (cAliasTmpMATR)->DIASATRASO ) / nCount

                    (cAliasTmpMATR)->(DbSkip())
                End


                // ----- CALCULA DADOS DO CLIENTE

                cQuery := enter + " SELECT TOP 1 * "

                // valor total pago
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALPAGO "

                // valor total pago ultimos 24 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt24Meses + "'
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALPAGO24MES "

                // valor total pago ultimos 12 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "'
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALPAGO12MES "

                // valor total pago ultimos 6 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt06Meses + "'
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALPAGO6MES "

                // maior atraso (vencido) não pago
                cQuery += enter + " , ISNULL((SELECT MAX(DATEDIFF(day,E1_VENCREA, '" + DToS(Date()) + "')) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' ' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_SALDO > 0 "
                cQuery += enter + "         AND E1_VENCREA < '" + DToS(Date()) + "' "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS MATRABERTO "

                // maior atraso pago 24 meses
                cQuery += enter + " , ISNULL((SELECT MAX(DATEDIFF(day,E1_VENCREA, E1_BAIXA)) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' ' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt24Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS MATRPAGO24 "

                // maior atraso pago 12 meses
                cQuery += enter + " , ISNULL((SELECT MAX(DATEDIFF(day,E1_VENCREA, E1_BAIXA)) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' ' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS MATRPAGO12 "

                // saldo de títulos em aberto (vencidos e não vencidos)
                cQuery += enter + " , ISNULL((SELECT SUM(E1_SALDO) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ''
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_STATUS = 'A' "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS SALDO_ABERTO "

                // verifica soma de títulos vencidos em aberto (atraso em aberto)
                cQuery += enter + " , ISNULL((SELECT SUM(E1_SALDO) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ''
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_STATUS = 'A' "
                cQuery += enter + "         AND E1_VENCREA < '" + DToS(Date()) + "' "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VENC_ABERTO "

                // qtd pagamentos pontuais
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA <= E1_VENCREA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS TOTPGTPONT "

                // qtd pagamentos não pontuais
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA > E1_VENCREA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS TOTPGTNAOPONT "

                // qtd total de pagamentos
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS TOTALPGTOS "

                // qtd pagamentos pontuais 24 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA <= E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt24Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTPONT24 "

                // qtd pagamentos não pontuais 24 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA > E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt24Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTNPONT24 "

                // qtd total de pagamentos 24 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt24Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS TOTPGTOS24 "

                // qtd total pagamentos 12 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "'
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS PGTOS12MESES "

                // qtd pagamentos pontuais 12 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA <= E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTPONT12 "

                // qtd pagamentos não pontuais 12 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA > E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTNPONT12 "

                // qtd pagamentos pontuais 06 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA <= E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt06Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTPONT06 "

                // qtd pagamentos não pontuais 06 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA > E1_VENCREA "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt06Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGTNPONT06 "

                // qtd total de pagamentos 06 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt06Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS TOTPGTOS06 "
                
                // qtd pagamentos pagos em até 5 dias nos ultimos 12 meses
                cQuery += enter + " , ISNULL((SELECT COUNT(E1_NUM) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = ' '  "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "'  "
                cQuery += enter + "         AND E1_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND E1_LOJA = SA1.A1_LOJA  "
                cQuery += enter + "         AND DATEDIFF(day, E1_BAIXA, E1_VENCREA) < 5  "
                cQuery += enter + "         AND E1_BAIXA >= '" + cDt12Meses + "' "
                cQuery += enter + "         AND E1_SALDO = 0 "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ),0) AS PGATE5DIAS "

                // valor total de compras
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS TOTCOMPRA "
                
                // valor total de compras ultimos 24 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_EMISSAO >= '" + cDt24Meses + "'
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALCOMPRA24MES "
                
                // valor total de compras ultimos 12 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_EMISSAO >= '" + cDt12Meses + "' "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALCOMPRA12MES "
                
                // valor total de compras ultimos 6 meses
                cQuery += enter + " , ISNULL((SELECT SUM(E1_VALOR) "
                cQuery += enter + "     FROM " + RetSQLName("SE1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
                cQuery += enter + "         AND E1_CLIENTE = A1_COD "
                cQuery += enter + "         AND E1_LOJA = A1_LOJA "
                cQuery += enter + "         AND E1_EMISSAO >= '" + cDt06Meses + "' "
                cQuery += enter + "         AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "     ), 0) AS VLRTOTALCOMPRA6MES "

                // quantidade de compras
                cQuery += enter + " , ISNULL((SELECT COUNT(*) "
                cQuery += enter + "     FROM " + RetSQLName("SF2")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(F2_FILIAL, 2) = '" + Left(FWxFilial("SF2"), 2) + "' "
                cQuery += enter + "         AND F2_CLIENTE = A1_COD "
                cQuery += enter + "         AND F2_LOJA = A1_LOJA "
                cQuery += enter + "         AND (SELECT count(*) "
				cQuery += enter + "             FROM " + RetSQLName("SE1") + " SE11 "
				cQuery += enter + "             WHERE SE11.D_E_L_E_T_ = ' ' "
				cQuery += enter + "             	AND E1_FILIAL = F2_FILIAL "
				cQuery += enter + "             	AND E1_NUM = F2_DUPL "
				cQuery += enter + "             	AND E1_CLIENTE = F2_CLIENTE "
				cQuery += enter + "             	AND E1_LOJA = F2_LOJA "
				cQuery += enter + "             	AND E1_TIPO NOT IN " + cTipos
				cQuery += enter + "             ) > 0 "
                cQuery += enter + "     ), 0) AS QTDCOMPRAS "
                
                // quantidade de compras em aberto
                cQuery += enter + " , ISNULL((SELECT COUNT(*) "
                cQuery += enter + "     FROM " + RetSQLName("SF2")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "     	AND LEFT(F2_FILIAL, 2) = '" + Left(FWxFilial("SF2"), 2) + "'
                cQuery += enter + "     	AND F2_CLIENTE = A1_COD "
                cQuery += enter + "     	AND F2_LOJA = A1_LOJA  "
                cQuery += enter + "     	AND (SELECT count(*) "
				cQuery += enter + "             FROM " + RetSQLName("SE1") + " SE11 " 
				cQuery += enter + "             WHERE D_E_L_E_T_ = ' ' "
				cQuery += enter + "             	AND E1_FILIAL = F2_FILIAL "
				cQuery += enter + "             	AND E1_NUM = F2_DUPL "
				cQuery += enter + "             	AND E1_CLIENTE = F2_CLIENTE "
				cQuery += enter + "             	AND E1_LOJA = F2_LOJA "
				cQuery += enter + "             	AND E1_STATUS = 'A' "
				cQuery += enter + "             	AND E1_TIPO NOT IN " + cTipos
				cQuery += enter + "             ) > 0 "
                cQuery += enter + "     ), 0) AS QTDCOMPABER "
                
                // quantidade de compras pagas
                cQuery += enter + " , ISNULL((SELECT COUNT(*) "
                cQuery += enter + "     FROM " + RetSQLName("SF2")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(F2_FILIAL, 2) = '" + Left(FWxFilial("SF2"), 2) + "' "
                cQuery += enter + "         AND F2_CLIENTE = A1_COD "
                cQuery += enter + "         AND F2_LOJA = A1_LOJA "
                cQuery += enter + "         AND (SELECT COUNT(*) "
				cQuery += enter + "             FROM " + RetSQLName("SE1") + " SE11 "
                cQuery += enter + "             WHERE SE11.D_E_L_E_T_ = '' "
                cQuery += enter + "                 AND E1_FILIAL = F2_FILIAL "
                cQuery += enter + "                 AND E1_NUM = F2_DUPL "
                cQuery += enter + "                 AND E1_CLIENTE = F2_CLIENTE "
                cQuery += enter + "                 AND E1_LOJA = F2_LOJA  "
                cQuery += enter + "                 AND E1_STATUS = 'A' "
                cQuery += enter + "                 AND E1_TIPO NOT IN " + cTipos
                cQuery += enter + "             ) = 0 "
                cQuery += enter + "     ), 0) AS QTDCOMPPAGAS "
                
                // quantidade de compras a prazo
                cQuery += enter + " , ISNULL((SELECT COUNT(*) FROM " + RetSQLName("SC5")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(C5_FILIAL, 2) = '" + Left(FWxFilial("SC5"), 2) + "' "
                cQuery += enter + "         AND C5_CLIENTE = SA1.A1_COD  "
                cQuery += enter + "         AND C5_LOJACLI = SA1.A1_LOJA  "
                //                  somente faturados
                cQuery += enter + "         AND C5_NOTA NOT IN ('', 'XXXXXXXXX') "
                //                  condições de pagamento "avista"
                cQuery += enter + "         AND C5_CONDPAG NOT IN " + FormatIn(AllTrim(SuperGetMV("MV_AVISTA", .F., "")), ";")
                cQuery += enter + "    ), 0) AS QTDCOMPRZ "

                // data atualização do limite
                cQuery += enter + " , (SELECT MAX(ZN1_DTRETO) "
                cQuery += enter + "     FROM " + RetSQLName("ZN1")
                cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                cQuery += enter + "         AND LEFT(ZN1_FILIAL, 2) = '" + Left(FWxFilial("ZN1"), 2) + "' "
                cQuery += enter + "         AND ZN1_CLIENT = A1_COD "
                cQuery += enter + "         AND ZN1_LOJA = A1_LOJA "
                //                  analise de cliente
                cQuery += enter + "         AND ZN1_RETANA IN ('C','R') "
                cQuery += enter + "     ) AS DTATULIM "

                // dados do cliente em todas as empresas
                For nX := 1 To Len(aEmpresas)
                    // limite de crédito
                    cQuery += enter + " , ISNULL((SELECT A1_LC FROM " + RetSQLName("SA1")
                    cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                    cQuery += enter + "         AND A1_FILIAL = '" + FWxFilial("SA1", aEmpresas[nX, 1]) + "' "
                    cQuery += enter + "         AND A1_CGC = SA1.A1_CGC  "
                    // cQuery += enter + "         AND A1_MSBLQL <> '1'  "
                    cQuery += enter + "    ), 0) AS 'LC" + aEmpresas[nX, 3] + "' "

                    // saldo títulos + saldo pedidos liberados
                    cQuery += enter + " , ISNULL((SELECT iif(A1_SALDUP + A1_SALPEDL > 0, A1_SALDUP + A1_SALPEDL, 0) FROM " + RetSQLName("SA1")
                    cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                    cQuery += enter + "         AND A1_FILIAL = '" + FWxFilial("SA1", aEmpresas[nX, 1]) + "' "
                    cQuery += enter + "         AND A1_CGC = SA1.A1_CGC  "
                    // cQuery += enter + "         AND A1_MSBLQL <> '1'  "
                    cQuery += enter + "    ), 0) AS 'SLDLIB" + aEmpresas[nX, 3] + "' "
                    
                    // vencimento limite de crédito
                    cQuery += enter + " , (SELECT A1_VENCLC FROM " + RetSQLName("SA1")
                    cQuery += enter + "     WHERE D_E_L_E_T_ = '' "
                    cQuery += enter + "         AND A1_FILIAL = '" + FWxFilial("SA1", aEmpresas[nX, 1]) + "' "
                    cQuery += enter + "         AND A1_CGC = SA1.A1_CGC  "
                    // cQuery += enter + "         AND A1_MSBLQL <> '1'  "
                    cQuery += enter + "    ) AS 'VENCLC" + aEmpresas[nX, 3] + "' "
                Next

                // média de atraso
                // cQuery += enter + " , ROUND(@nA1_METR, 2) as MEDATRASO "
                
                // maior atraso
                cQuery += enter + " , ISNULL((SELECT MAX(DATEDIFF(day, E1_VENCREA, E1_BAIXA)) "
		        cQuery += enter + "     FROM " + RetSQLName("SE1")
		        cQuery += enter + "     WHERE D_E_L_E_T_ = ' ' "
		        cQuery += enter + "         AND LEFT(E1_FILIAL, 2) = '" + Left(FWxFilial("SE1"), 2) + "' "
		        cQuery += enter + "     	AND E1_CLIENTE = SA1.A1_COD "  
		        cQuery += enter + "     	AND E1_LOJA = SA1.A1_LOJA "
		        cQuery += enter + "     	AND E1_SALDO = 0 "
		        cQuery += enter + "     	AND E1_TIPO NOT IN " + cTipos
		        cQuery += enter + "     	AND E1_BAIXA > E1_VENCREA "
		        cQuery += enter + "    ), 0) AS MAIORATRASO "

                cQuery += enter + " FROM " + RetSQLTab("SA1")
                cQuery += enter + " WHERE " + RetSQLCond("SA1")
                // cQuery += enter + " AND A1_MSBLQL <> '1' "  // não bloqueado
                cQuery += enter + " AND A1_CGC = '" + cCGC + "' "



                MemoWrite("C:\temp\query_api_neocredit.txt", cQuery)
                cQuery := ChangeQuery(cQuery)

                DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTmp,.F.,.T.)

                (cAliasTmp)->(DbGoTop())
                If ! (cAliasTmp)->(Eof())
                    
                    jResponse["dados"] := JsonObject():New()
                    jResponse["dados"]["razao"] := AllTrim((cAliasTmp)->A1_NOME)                                        // Razão social
                    jResponse["dados"]["idCliente"] := AllTrim((cAliasTmp)->A1_COD) + AllTrim((cAliasTmp)->A1_LOJA)     // Codigo + Loja
                    jResponse["dados"]["cnpj"] := AllTrim((cAliasTmp)->A1_CGC)                                          // CPF/CNPJ
                    jResponse["dados"]["limiteCredito"] := (cAliasTmp)->A1_LC                                           // Valor de limite de crédito
                    jResponse["dados"]["dataValidadeLimite"] := DToC(SToD((cAliasTmp)->A1_VENCLC))                      // Data de vencimento do limite de crédito
                    jResponse["dados"]["dataAtualizacaoLimite"] := DToC(SToD((cAliasTmp)->DTATULIM))                    // Data atualização do limite

                    for nx := 1 to len(aEmpresas)
                    jResponse["dados"]["limiteCredito"+Capital(aEmpresas[nx,2])] := &("(cAliasTmp)->LC"+aEmpresas[nx,3])              // Valor de limite de crédito geral de Ferragens
                    jResponse["dados"]["dataValidadeLimite"+Capital(aEmpresas[nx,2])] := DToC(SToD((cAliasTmp)->&("VENCLC"+aEmpresas[nx,3])))  // Data de vencimento do limite de crédito geral de Ferragens
                    next

                    jResponse["dados"]["risco"] := AllTrim((cAliasTmp)->A1_RISCO)                                       // Risco do cliente
                    jResponse["dados"]["dataPrimeiraCompra"] := DToC(SToD((cAliasTmp)->A1_PRICOM))                      // Data da primeira conta
                    jResponse["dados"]["dataCadastro"] := DToC(SToD((cAliasTmp)->A1_DTCAD))                             // Data de cadastro do cliente
                    jResponse["dados"]["dataUltimaCompra"] := DToC(SToD((cAliasTmp)->A1_ULTCOM))                        // Data da ultima compra
                    jResponse["dados"]["valorTotalPago"] := (cAliasTmp)->VLRTOTALPAGO
                    jResponse["dados"]["valorTotalPago24meses"] := (cAliasTmp)->VLRTOTALPAGO24MES
                    jResponse["dados"]["valorTotalPago12meses"] := (cAliasTmp)->VLRTOTALPAGO12MES
                    jResponse["dados"]["valorTotalPago6meses"] := (cAliasTmp)->VLRTOTALPAGO6MES
                    jResponse["dados"]["valorCompraMediaMensal"] := Round((cAliasTmp)->TOTCOMPRA / DateDiffMonth(Date(), SToD((cAliasTmp)->A1_PRICOM)), 2)
                    jResponse["dados"]["valorTotalAberto"] := (cAliasTmp)->SALDO_ABERTO
                    jResponse["dados"]["percentualLimiteDisponivel"] := Round( If((((cAliasTmp)->A1_LC - ((cAliasTmp)->A1_SALDUP + (cAliasTmp)->A1_SALPEDL)) / (cAliasTmp)->A1_LC) > 0, (((cAliasTmp)->A1_LC - ((cAliasTmp)->A1_SALDUP + (cAliasTmp)->A1_SALPEDL)) / (cAliasTmp)->A1_LC), 0) * 100 , 2)
                    jResponse["dados"]["limiteDisponivel"] := Round( If(((cAliasTmp)->A1_LC - ((cAliasTmp)->A1_SALDUP + (cAliasTmp)->A1_SALPEDL)) > 0, ((cAliasTmp)->A1_LC - ((cAliasTmp)->A1_SALDUP + (cAliasTmp)->A1_SALPEDL)), 0), 2)

                    for nx := 1 to len(aEmpresas)
                    jResponse["dados"]["limiteDisponivel"+Capital(aEmpresas[nx,2])] := Round( If(((cAliasTmp)->&("LC"+aEmpresas[nx,3]) - (cAliasTmp)->&("SLDLIB"+aEmpresas[nx,3])) > 0, (cAliasTmp)->&("LC"+aEmpresas[nx,3]) - (cAliasTmp)->&("SLDLIB"+aEmpresas[nx,3]), 0), 2)        // Personalizáveis
                    next

                    jResponse["dados"]["possuiAtrasoAberto"] := If((cAliasTmp)->VENC_ABERTO > 0, .T., .F.)
                    jResponse["dados"]["maiorAtraso"] := If((cAliasTmp)->MATRABERTO > 0, (cAliasTmp)->MATRABERTO, 0)
                    jResponse["dados"]["mediaAtraso"] := Round(nMediaAtrasos, 2)
                    jResponse["dados"]["maiorAtrasoPago"] := (cAliasTmp)->MAIORATRASO
                    jResponse["dados"]["maiorAtrasoPago24meses"] := (cAliasTmp)->MATRPAGO24
                    jResponse["dados"]["maiorAtrasoPago12meses"] := (cAliasTmp)->MATRPAGO12
                    jResponse["dados"]["valorTotalCompras"] := (cAliasTmp)->TOTCOMPRA
                    jResponse["dados"]["valorTotalCompras24meses"] := (cAliasTmp)->VLRTOTALCOMPRA24MES
                    jResponse["dados"]["valorTotalCompras12meses"] := (cAliasTmp)->VLRTOTALCOMPRA12MES
                    jResponse["dados"]["valorTotalCompras6meses"] := (cAliasTmp)->VLRTOTALCOMPRA6MES
                    jResponse["dados"]["percentualPagamentosPontuais"] := Round( If(((cAliasTmp)->TOTPGTPONT / (cAliasTmp)->TOTALPGTOS) > 0, ((cAliasTmp)->TOTPGTPONT / (cAliasTmp)->TOTALPGTOS), 0) * 100, 2)
                    jResponse["dados"]["percentualPagamentosPontuais24meses"] := Round( If(((cAliasTmp)->PGTPONT24 / (cAliasTmp)->TOTPGTOS24) > 0, ((cAliasTmp)->PGTPONT24 / (cAliasTmp)->TOTPGTOS24), 0) * 100, 2)
                    jResponse["dados"]["percentualPagamentosPontuais12meses"] := Round( If(((cAliasTmp)->PGTPONT12 / (cAliasTmp)->PGTOS12MESES) > 0, ((cAliasTmp)->PGTPONT12 / (cAliasTmp)->PGTOS12MESES), 0) * 100, 2)
                    jResponse["dados"]["percentualPagamentosPontuais6meses"] := Round( If(((cAliasTmp)->PGTPONT06 / (cAliasTmp)->TOTPGTOS06) > 0, ((cAliasTmp)->PGTPONT06 / (cAliasTmp)->TOTPGTOS06), 0) * 100, 2)
                    jResponse["dados"]["percentualPagamentosPagosAte5dias"] := Round( If(((cAliasTmp)->PGATE5DIAS / (cAliasTmp)->PGTOS12MESES) > 0, ((cAliasTmp)->PGATE5DIAS / (cAliasTmp)->PGTOS12MESES), 0) * 100, 2)
                    jResponse["dados"]["quantidadeCompras"] := (cAliasTmp)->QTDCOMPRAS
                    // jResponse["dados"]["quantidadeComprasPagas"] := (cAliasTmp)->A1_NROPAG
                    jResponse["dados"]["quantidadeComprasPagas"] := (cAliasTmp)->QTDCOMPPAGAS
                    jResponse["dados"]["quantidadeComprasAberto"] := (cAliasTmp)->QTDCOMPABER
                    jResponse["dados"]["quantidadeComprasPrazo"] := (cAliasTmp)->QTDCOMPRZ

                    jResponse["message"] := "Sucesso."

                    // grava log
                    fLogMsg("Retornada analise de historico do Cliente " + cCGC, "02")

                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Cliente não encontrado na base."
                    // grava log
                    fLogMsg(jResponse["message"], "03")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "O CPF/CNPJ informado não é válido."
                // grava log
                fLogMsg(jResponse["message"], "04")
            EndIf
            
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa não informado (path params)."
            // grava log
			fLogMsg(jResponse["message"], "05")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "06")
    EndIf

    If(Select(cAliasTmp) > 0, (cAliasTmp)->(DbCloseArea()), )
    If(Select(cAliasTmpMATR) > 0, (cAliasTmpMATR)->(DbCloseArea()), )

    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.


/*/{Protheus.doc} NeoCredit::GetConsultaEmail
    Consulta de e-mail do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 13/05/2022
    @return variant, return_description
    /*/
Method GetConsultaEmail() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()

    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jParams := oRest:getPathParamsRequest()


    // validações
    If jHeader:ToJson() != "{}"

        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

            // empresa para consulta
            cFilAnt   := AllTrim(jParams['cFilEmpresa'])
            // cFilAnt   := "0202"
            
            // valida se recebeu o código identificador do cliente
            If jHeader:HasProperty("cnpj") .and. !Empty(jHeader['cnpj']) .and. (Len(AllTrim(jHeader['cnpj'])) == 11 .or. Len(AllTrim(jHeader['cnpj'])) == 14)

                // dados do cpf/cnpj
                cCGC := AllTrim(jHeader['cnpj'])
                
                // grava log
                fLogMsg("Consulta de E-MAIL de cliente " + cCGC, "01")

                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cCGC, TamSX3("A1_CGC")[1]) ))

                    jResponse["dados"] := JsonObject():new()
                    jResponse["dados"]["email"]   := AllTrim(SA1->A1_EMAIL)
                    jResponse["message"] := "Sucesso."

                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Cliente não encontrado na base."
                    // grava log
                    fLogMsg(jResponse["message"], "02")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "O CPF/CNPJ informado não é válido."
                // grava log
                fLogMsg(jResponse["message"], "03")
            EndIf
         
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa não informado (path params)."
            // grava log
			fLogMsg(jResponse["message"], "04")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "05")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.

/*/{Protheus.doc} NeoCredit::GetConsultaTelefone
    Consulta de telefone do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 13/05/2022
    @return variant, return_description
    /*/
Method GetConsultaTelefone() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()

    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jParams := oRest:getPathParamsRequest()

    // validações
    If jHeader:ToJson() != "{}"
        
        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

            // carrega a filial correta
            cFilAnt   := AllTrim(jParams['cFilEmpresa'])
            // cFilAnt   := "0202"
                
            // valida se recebeu o código identificador do cliente
            If jHeader:HasProperty("cnpj") .and. !Empty(jHeader['cnpj']) .and. (Len(AllTrim(jHeader['cnpj'])) == 11 .or. Len(AllTrim(jHeader['cnpj'])) == 14)

                // dados do cpf/cnpj
                cCGC := AllTrim(jHeader['cnpj'])

                // grava log
                fLogMsg("Consulta de TELEFONE de cliente " + cCGC, "01")

                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cCGC, TamSX3("A1_CGC")[1]) ))

                    jResponse["dados"] := JsonObject():new()
                    jResponse["dados"]["telefone"] := AllTrim(SA1->A1_DDD + SA1->A1_TEL)

                    jResponse["message"] := "Sucesso."

                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Cliente não encontrado na base."
                    // grava log
                    fLogMsg(jResponse["message"], "02")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "O CPF/CNPJ informado não é válido."
                // grava log
                fLogMsg(jResponse["message"], "03")
            EndIf
        
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa não informado (path params)."
            // grava log
			fLogMsg(jResponse["message"], "04")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "05")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.

/*/{Protheus.doc} NeoCredit::GetConsultaEndereco
    Consulta de endereco do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 13/05/2022
    @return variant, return_description
    /*/
Method GetConsultaEndereco() Class NeoCredit

    // retorno do processo
    Local lRet           := .T.
    // código de erro
    Local cCodErro       := 200  // OK
    // body json
    Local jHeader        := JsonObject():new()
    Local jParams        := JsonObject():new()
    // body retorno
    Local jResponse      := JsonObject():new()

    Private oPrint
    Private oFile
    Private oFileErase

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jParams := oRest:getPathParamsRequest()

    // VarInfo("jHeader", jHeader)
    // VarInfo("jParams", jParams)

    // validações
    If jHeader:ToJson() != "{}"
        
        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

            // empresa para consulta
            cFilAnt := AllTrim(jParams['cFilEmpresa'])
            // cFilAnt   := "0202"
            
            // valida se recebeu o código identificador do cliente
            If jHeader:HasProperty("cnpj") .and. !Empty(jHeader['cnpj']) .and. (Len(AllTrim(jHeader['cnpj'])) == 11 .or. Len(AllTrim(jHeader['cnpj'])) == 14)

                // dados do cpf/cnpj
                cCGC := AllTrim(jHeader['cnpj'])

                // grava log
                fLogMsg("Consulta de ENDERECO de cliente " + cCGC, "01")

                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cCGC, TamSX3("A1_CGC")[1]) ))

                    jResponse["dados"] := JsonObject():new()
                    jResponse["dados"]["endereco"] := AllTrim(SA1->A1_END)
                    jResponse["dados"]["bairro"]   := AllTrim(SA1->A1_BAIRRO)
                    jResponse["dados"]["cidade"]   := AllTrim(SA1->A1_MUN)
                    jResponse["dados"]["cep"]      := AllTrim(SA1->A1_CEP)
                    jResponse["dados"]["estado"]   := AllTrim(SA1->A1_EST)

                    jResponse["message"]  := "Sucesso."

                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Cliente não encontrado na base."
                    // grava log
                    fLogMsg(jResponse["message"], "02")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "O CPF/CNPJ informado não é válido."
                // grava log
                fLogMsg(jResponse["message"], "03")
            EndIf
            
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa não informado (path params)."
            // grava log
			fLogMsg(jResponse["message"], "04")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "05")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.


/*/{Protheus.doc} NeoCredit::GetConsultaDadosCliente
    Consulta de e-mail do cliente
    @type method
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 25/11/2022
    @return variant, return_description
    /*/
Method GetConsultaDadosCliente() Class NeoCredit

    // retorno do processo
    Local lRet                  := .T.
    // código de erro
    Local cCodErro              := 200  // OK
    // body json
    Local jHeader               := JsonObject():new()
    Local jParams               := JsonObject():new()
    // body retorno
    Local jResponse             := JsonObject():new()
    Local nX, nY
    Local cCGC                  := ""
    Local cCodigoCli            := ""
    Local cLojaCli              := ""
    Local cDDDCliente           := ""
    Local cTelefoneCliente      := ""
    Local cCGCNumRegistro       := ""
    Local cQryGenerica          := ""
    Local cQryEmail             := ""
    Local cQryTelefone          := ""
    Local cQryRaizCGC           := ""
    Local cQryReferencias       := ""
    Local cClientesMesmaRaiz    := ""
    Local aListaEmailCliente    := {}
    Local aClientesMesmoEmail   := {}
    Local aClientesMesmoTelefone:= {}
    Local aClientesMesmaRaiz    := {}
    Local aReferencias          := {}
    // dominios de e-mials da metalnox a excluir da consulta (vendedores adicionam seus e-mail no cadastro de cliente)
    Local aDominiosEmailsMtx    := StrTokArr(SuperGetMV("MX_EMLDOMN", .F., "grupometalnox;metalnox;jjividros;metalnoxpersonalizaveis;metalnoxferragens"), ";")
    Local aFieldsSAOExc         := {"AO_FILIAL", "AO_CLIENTE", "AO_LOJA", "AO_TIPO", "AO_ITEM"}
    Local aFieldsSAO            := {}
    Local cFieldsSAO            := ""

    Private oPrint
    Private oFile
    Private oFileErase

    // campos SAO
    aEval(FWSX3Util():GetAllFields("SAO", .F.), {|cCampo| RetCamposSAOConsulta(aFieldsSAOExc, cCampo, @aFieldsSAO) } )
    cFieldsSAO := ArrTokStr(aFieldsSAO, ",")

    // grava dados do body recebido
    jHeader := oRest:GetHeaderRequest()
    jParams := oRest:GetPathParamsRequest()

    /*  CONSULTA DE TESTES PARA ENCONTRAR CLIENTES COM MESMO E-MAIL

        SELECT TRIM(SA1.A1_EMAIL) FROM SA1010 SA1
                    INNER JOIN (SELECT * FROM SA1010 A12 WHERE D_E_L_E_T_ = '' ) AS A12
                    ON A12.A1_EMAIL = SA1.A1_EMAIL
                    AND A12.A1_CGC <> SA1.A1_CGC
        WHERE SA1.D_E_L_E_T_ = ''
        AND SA1.A1_PESSOA = 'J'
        GROUP BY SA1.A1_EMAIL HAVING COUNT(*) > 1

    */
    
    // validações
    If jHeader:ToJson() != "{}"

        // valida se recebeu o código identificador da empresa
        If jParams:HasProperty("cFilEmpresa") .and. !Empty(jParams['cFilEmpresa'])

            // empresa para consulta
            cFilAnt   := AllTrim(jParams['cFilEmpresa'])
            // cFilAnt   := "0202"
            
            // valida se recebeu o código identificador do cliente
            If jHeader:HasProperty("cnpj") .and. !Empty(jHeader['cnpj']) .and. (Len(AllTrim(jHeader['cnpj'])) == 11 .or. Len(AllTrim(jHeader['cnpj'])) == 14)

                // dados do cpf/cnpj
                cCGC        := AllTrim(jHeader['cnpj'])
                cCodigoCli  := SubStr(AllTrim(jHeader['idCLiente']), 1, TamSX3("A1_COD")[1])
                cLojaCli    := SubStr(AllTrim(jHeader['idCLiente']), TamSX3("A1_COD")[1], TamSX3("A1_LOJA")[1])

                // grava log
                fLogMsg("Consulta de dados do cliente " + cCGC, "01")

                DbSelectArea("SA1")
                SA1->(DbSetOrder(3))    // 3- A1_FILIAL, A1_CGC
                If SA1->(DbSeek(FWxFilial("SA1") + PadR(cCGC, TamSX3("A1_CGC")[1]) ))// .and. SA1->A1_MSBLQL != '1'

                    // dados do cliente
                    aListaEmailCliente := StrTokArr(Upper(AllTrim(SA1->A1_EMAIL)), ";")
                    cDDDCliente := AllTrim(SA1->A1_DDD)
                    cTelefoneCliente := StrTran(StrTran(AllTrim(SA1->A1_TEL), '-', ''), ' ', '')
                    // pessoa jurídica pega a raiz do cnpj
                    If SA1->A1_PESSOA == "J"
                        cCGCNumRegistro := SubString(AllTrim(SA1->A1_CGC), 1, 8)
                    Else
                        cCGCNumRegistro := AllTrim(SA1->A1_CGC)
                    EndIf
                    cClientesMesmaRaiz := ""

                    // busca todos os telefones do cliente e dos contatos
                    aTelefones := RetTelefonesDoCliente(cCGC)


                    // ----- query base para busca se há cadastros de outros clientes com o mesmos dados de endereço, e-mail, telefones, raiz do cnpj...
                    cQryGenerica := " SELECT A1_FILIAL, A1_CGC FROM " + RetSqlTab("SA1")
                    cQryGenerica += " WHERE SA1.D_E_L_E_T_ = '' "
                    // cQryGenerica += " AND A1_MSBLQL <> '1' "
                    // somente pessoa jurídica
                    cQryGenerica += " AND A1_PESSOA = 'J' "
                    // cQryGenerica += " AND A1_FILIAL + A1_CGC <> '" + FWxFilial("SA1") + cCGC + "' "

                    
                    // ----- ANALISE DE RAIZ CNPJ
                    // verifica se encontra o DDD + Telefone em outros clientes
                    cQryRaizCGC += " AND A1_FILIAL + A1_CGC <> '" + FWxFilial("SA1") + cCGC + "' "
                    cQryRaizCGC += " AND SUBSTRING(A1_CGC, 1, 8) = '" + Left(cCGCNumRegistro, 8) + "' "

                    cQryRaizCGC += " ORDER BY A1_FILIAL, A1_CGC "

                    cQryRaizCGC := ChangeQuery(cQryGenerica + cQryRaizCGC)
                    aClientesMesmaRaiz := U_SqlToVet(cQryRaizCGC)
                    aEval(aClientesMesmaRaiz, {|aCli| cClientesMesmaRaiz += If( !(AllTrim(aCli[2]) $ cClientesMesmaRaiz), If(!Empty(cClientesMesmaRaiz), ";", "") + AllTrim(aCli[2]), "" ) })
                    

                    // ----- ANALISE DE E-MAILS
                    If !Empty(aListaEmailCliente)

                        // cnpj diferente
                        cQryEmail += " AND A1_CGC <> '" + cCGC + "' "
                        If !Empty(cClientesMesmaRaiz)
                            cQryEmail += " AND A1_CGC NOT IN " + FormatIn(cClientesMesmaRaiz, ";")
                        EndIf
                        cQryEmail += " AND ( "

                        // verifica se encontra um dos e-mail em outros clientes
                        For nX := 1 To Len(aListaEmailCliente)

                            // valida se o e-mail que está sendo verificado não é uma e-mail do grupo metalnox
                            If aScan(aDominiosEmailsMtx, {|cDominioMTX| Upper(AllTrim(cDominioMTX)) $ Upper(AllTrim(aListaEmailCliente[nX]))}) == 0
                                lEmail := .T.
                                If nX > 1
                                    cQryEmail += " OR "
                                EndIf
                                cQryEmail += " CHARINDEX('" + AllTrim(aListaEmailCliente[nX]) + "', UPPER(TRIM(A1_EMAIL))) > 0 "
                            EndIf
                        Next

                        cQryEmail += " ) "

                        cQryEmail := ChangeQuery(cQryGenerica + cQryEmail)
                        aClientesMesmoEmail := U_SqlToVet(cQryEmail)
                    EndIf


                    // ----- ANALISE DE TELEFONES
                    // verifica se encontra o DDD + Telefone em outros clientes/contatos
                    If !Empty(aTelefones)
                        lTelefone := .T.
                        cDDDTelFormatado := ""
                        aEval(aTelefones, {|aTel| cDDDTelFormatado += If(!Empty(cDDDTelFormatado), ",", "") + AllTrim(aTel[1]) + AllTrim(aTel[2]) })
                        
                        // cnpj diferente
                        // cQryTelefone += " AND A1_CGC <> '" + cCGC + "' "
                        // cQryTelefone += " AND ( "
                        // cQryTelefone += "   (A1_DDD = '" + AllTrim(cDDDCliente) + "' AND REPLACE(REPLACE(A1_TEL, '-', ''), ' ', '') = '" + cTelefoneCliente + "' ) "
                        // cQryTelefone += " ) "

                        // somente pessoa jurídica
                        cQryTelefone := " SELECT A1_FILIAL, A1_CGC, DDD, TELEFONE
                        cQryTelefone += " FROM (
                        cQryTelefone += "     SELECT 
                        cQryTelefone += "         A1_FILIAL, A1_CGC, A1_DDD, A1_TEL, A1_FAX, U5_DDD, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_DDD, AGB_TELEFO
                        cQryTelefone += "     FROM " + RetSqlTab("SU5")
                        cQryTelefone += "     INNER JOIN " + RetSqlTab("AC8")
                        cQryTelefone += "                     ON AC8.AC8_CODCON = SU5.U5_CODCONT
                        cQryTelefone += "                     AND AC8.AC8_ENTIDA = 'SA1'
                        cQryTelefone += "                     AND AC8.AC8_FILIAL = SUBSTRING(SU5.U5_FILIAL,1,2)
                        cQryTelefone += "                     AND AC8.D_E_L_E_T_ = '' 
                        cQryTelefone += "     INNER JOIN " + RetSqlTab("SA1")
                        cQryTelefone += "                     ON SA1.A1_COD + SA1.A1_LOJA = AC8.AC8_CODENT
                        cQryTelefone += "                     AND A1_PESSOA = 'J' "
                        cQryTelefone += "                     AND A1_CGC <> '" + cCGC + "'
                        If !Empty(cClientesMesmaRaiz)
                            cQryTelefone += "                 AND A1_CGC NOT IN " + FormatIn(cClientesMesmaRaiz, ";")
                        EndIf
                        cQryTelefone += "                     AND SA1.A1_FILIAL = AC8.AC8_FILENT
                        cQryTelefone += "                     AND SA1.D_E_L_E_T_ = '' 
                        cQryTelefone += "     LEFT JOIN " + RetSqlTab("AGB")
                        cQryTelefone += "                     ON AGB_CODENT = SU5.U5_CODCONT
                        cQryTelefone += "                     AND AGB_ENTIDA = 'SU5'
                        cQryTelefone += "                     AND AGB_FILIAL = SUBSTRING(SU5.U5_FILIAL,1,2)
                        cQryTelefone += "                     AND AGB.D_E_L_E_T_ = ''
                        cQryTelefone += "     WHERE SU5.U5_ATIVO = '1' 
                        cQryTelefone += "     AND " + RetSqlCond("SU5")
                        cQryTelefone += "     GROUP BY A1_FILIAL, A1_CGC, A1_DDD, A1_TEL, A1_FAX, U5_DDD, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_DDD, AGB_TELEFO
                        cQryTelefone += " ) AS TELEFONES
                        cQryTelefone += " UNPIVOT (TELEFONE FOR COLUNASTEL IN (A1_TEL, A1_FAX, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_TELEFO)) AS TELUNPVT
                        cQryTelefone += " UNPIVOT (DDD FOR COLUNASDDD IN (A1_DDD, U5_DDD, AGB_DDD)) AS TELUNPVT2
                        cQryTelefone += " WHERE TELEFONE <> ''
                        cQryTelefone += " AND LTRIM(RTRIM(DDD)) + LTRIM(RTRIM(TELEFONE)) IN " + FormatIn(cDDDTelFormatado, ",")
                        cQryTelefone += " GROUP BY A1_FILIAL, A1_CGC, DDD, TELEFONE
                        cQryTelefone := ChangeQuery(cQryTelefone)

                        aClientesMesmoTelefone := U_SqlToVet(cQryTelefone)
                    EndIf


                    jResponse["dados"]                      := JsonObject():New()
                    jResponse["dados"]["documento"]         := AllTrim(SA1->A1_CGC)
                    jResponse["dados"]["email"]             := AllTrim(SA1->A1_EMAIL)
                    jResponse["dados"]["ddd"]               := AllTrim(SA1->A1_DDD)
                    jResponse["dados"]["telefone"]          := AllTrim(SA1->A1_TEL)
                    jResponse["dados"]["endereco"]          := AllTrim(SA1->A1_END)
                    jResponse["dados"]["bairro"]            := AllTrim(SA1->A1_BAIRRO)
                    jResponse["dados"]["cidade"]            := AllTrim(SA1->A1_MUN)
                    jResponse["dados"]["cep"]               := AllTrim(SA1->A1_CEP)
                    jResponse["dados"]["estado"]            := AllTrim(SA1->A1_EST)
                    jResponse["dados"]["outros_cnpjs"]      := {}
                    jResponse["dados"]["referencias_erp"]   := {}


                    // clientes encontrados com mesma raiz de cnpj cadastrado
                    For nX := 1 To Len(aClientesMesmaRaiz)
                        jCliente := JsonObject():New()
                        // ajuste na filial, pois o cadastro de clientes é compartilhado
                        jCliente["empresa"] := AllTrim(aClientesMesmaRaiz[nX, 1]) + If(AllTrim(aClientesMesmaRaiz[nX, 1]) == "02", "02", "01")  // "0101", "0202", "0301"
                        jCliente["cnpj"]    := AllTrim(aClientesMesmaRaiz[nX, 2])
                        jCliente["dado_encontrado"] := "Raiz CNPJ"
                        AAdd(jResponse["dados"]["outros_cnpjs"], jCliente)
                    Next

                    // clientes encontrados com mesmo e-mail cadastrado
                    For nX := 1 To Len(aClientesMesmoEmail)
                        jCliente := JsonObject():New()
                        // ajuste na filial, pois o cadastro de clientes é compartilhado
                        jCliente["empresa"] := AllTrim(aClientesMesmoEmail[nX, 1]) + If(AllTrim(aClientesMesmoEmail[nX, 1]) == "02", "02", "01")  // "0101", "0202", "0301"
                        jCliente["cnpj"]    := AllTrim(aClientesMesmoEmail[nX, 2])
                        jCliente["dado_encontrado"] := "E-mail"
                        AAdd(jResponse["dados"]["outros_cnpjs"], jCliente)
                    Next

                    // clientes encontrados com mesmo telefone cadastrado
                    For nX := 1 To Len(aClientesMesmoTelefone)
                        jCliente := JsonObject():New()
                        // ajuste na filial, pois o cadastro de clientes é compartilhado
                        jCliente["empresa"] := AllTrim(aClientesMesmoTelefone[nX, 1]) + If(AllTrim(aClientesMesmoTelefone[nX, 1]) == "02", "02", "01")  // "0101", "0202", "0301"
                        jCliente["cnpj"]    := AllTrim(aClientesMesmoTelefone[nX, 2])
                        jCliente["dado_encontrado"] := "Telefone"
                        AAdd(jResponse["dados"]["outros_cnpjs"], jCliente)
                    Next

    
                    // ----- CONSULTA REFERÊNCIAS DO CLIENTE
                    cQryReferencias := " SELECT " + cFieldsSAO + " FROM " + RetSqlTab("SA1")
                    cQryReferencias += "            INNER JOIN " + RetSqlTab("SAO")
                    cQryReferencias += "            ON AO_CLIENTE = A1_COD "
                    cQryReferencias += "            AND AO_LOJA = A1_LOJA "
                    cQryReferencias += "            AND LEFT(AO_FILIAL, 2) = '" + Left(FWxFilial("SAO"), 2) + "' "
                    cQryReferencias += "            AND SAO.D_E_L_E_T_ = ' ' "
                    cQryReferencias += " WHERE A1_FILIAL + A1_CGC = '" + FWxFilial("SA1") + cCGC + "' "
                    cQryReferencias += " AND A1_PESSOA = 'J' "
                    cQryReferencias += " AND SA1.D_E_L_E_T_ = '' "

                    cQryReferencias := ChangeQuery(cQryReferencias)
                    aReferencias := U_SqlToVet(cQryReferencias)


                    // referencias do cliente
                    For nX := 1 To Len(aReferencias)
                        jReferencia := JsonObject():New()

                        For nY := 1 To Len(aFieldsSAO)
                            // nome campo
                            cNomeCampo := AllTrim(Lower(StrTran(StrTran(StrTran( AllTrim(GetSx3Cache(aFieldsSAO[nY], "X3_TITULO")), "/", " "), ".", " "), "  ", " ")))
                            jReferencia[cNomeCampo] := AllTrim(aReferencias[nX, nY])
                        Next
                        AAdd(jResponse["dados"]["referencias_erp"], jReferencia)
                    Next

                    

                    jResponse["message"] := "Sucesso."

                Else
                    lRet                 := .F.
                    cCodErro             := 400 // Bad Request
                    jResponse["message"] := "Cliente não encontrado na base."
                    // grava log
                    fLogMsg(jResponse["message"], "04")
                EndIf
            Else
                lRet                 := .F.
                cCodErro             := 400 // Bad Request
                jResponse["message"] := "O CPF/CNPJ informado não é válido."
                // grava log
                fLogMsg(jResponse["message"], "05")
            EndIf
         
        Else
            lRet                 := .F.
            cCodErro             := 400 // Bad Request
            jResponse["message"] := "Parâmetro da empresa não informado (path params)."
            // grava log
			fLogMsg(jResponse["message"], "06")
        EndIf
    Else
        lRet                 := .F.
        cCodErro             := 400 // Bad Request
        jResponse["message"] := "Não foi possível ler o conteúdo do body."
        // grava log
        fLogMsg(jResponse["message"], "07")
    EndIf


    // atualiza status de retorno
    jResponse["success"] := lRet
    // status code
    oRest:SetStatusCode(cCodErro)

    // retorno
    oRest:SetResponse( jResponse:ToJson() )

Return .T.


/*/{Protheus.doc} fLogMsg
    Exibi log no consilole
    @type function
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 8/25/2023
    @param cMsg, character, mensagem
    @param cID, character, id da mensagem
    @return variant, return_description
    /*/
Static Function fLogMsg(cMsg, cID)
    LogMsg(FunName(), 22, 6, 1, cID, "", "NEOCREDIT (" + FwCodFil() + ") -> " + cMsg)
Return Nil


/*/{Protheus.doc} RetCamposSAOConsult
    Adiciona somente os campo validos da tabela SAO
    @type function
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 9/22/2023
    @param aFieldsSAO, array, Campos a desconsiderar
    @return variant, return_description
/*/
Static Function RetCamposSAOConsulta(aFieldsSAOExc, cCampo, aFieldsSAO)

    If aScan(aFieldsSAOExc, {|cFldExc| cCampo == cFldExc}) == 0
        AAdd(aFieldsSAO, cCampo)
    EndIf
    
Return Nil


/*/{Protheus.doc} RetTelefonesDoCliente
    Gera uma lista com todos os telefones do cliente e telefones dos contatos do cliente
    @type function
    @version 1.0
    @author Daniel Scheeren - Gruppe
    @since 10/19/2023
    @param cCGC, character, Cpf/Cnpj
    @return variant, return_description
/*/
Static Function RetTelefonesDoCliente(cCGC)

    Local cQryTelefCli := ""
    Local aTelefones   := {}

    cQryTelefCli := " SELECT DDD, TELEFONE
    cQryTelefCli += " FROM (
    cQryTelefCli += "     SELECT 
    cQryTelefCli += "         A1_DDD, A1_TEL, A1_FAX, U5_DDD, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_DDD, AGB_TELEFO
    cQryTelefCli += "     FROM " + RetSqlTab("SU5")
    cQryTelefCli += "     INNER JOIN " + RetSqlTab("AC8")
    cQryTelefCli += "                     ON AC8.AC8_FILIAL = SUBSTRING(SU5.U5_FILIAL,1,2)
    cQryTelefCli += "                     AND AC8.AC8_CODCON = SU5.U5_CODCONT
    cQryTelefCli += "                     AND AC8.AC8_ENTIDA = 'SA1'
    cQryTelefCli += "                     AND AC8.D_E_L_E_T_ = '' 
    cQryTelefCli += "     INNER JOIN " + RetSqlTab("SA1")
    cQryTelefCli += "                     ON SA1.A1_FILIAL = AC8.AC8_FILENT
    cQryTelefCli += "                     AND SA1.A1_COD + SA1.A1_LOJA = AC8.AC8_CODENT
    cQryTelefCli += "                     AND SA1.D_E_L_E_T_ = '' 
    cQryTelefCli += "     LEFT JOIN " + RetSqlTab("AGB")
    cQryTelefCli += "                     ON AGB_FILIAL = SUBSTRING(SU5.U5_FILIAL,1,2)
    cQryTelefCli += "                     AND AGB_CODENT = SU5.U5_CODCONT
    cQryTelefCli += "                     AND AGB_ENTIDA = 'SU5'
    cQryTelefCli += "                     AND AGB.D_E_L_E_T_ = ''
    cQryTelefCli += "     WHERE SU5.U5_ATIVO = '1' 
    cQryTelefCli += "     AND A1_CGC = '" + cCGC + "'
    cQryTelefCli += "     AND " + RetSqlCond("SA1")
    cQryTelefCli += "     GROUP BY A1_DDD, A1_TEL, A1_FAX, U5_DDD, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_DDD, AGB_TELEFO
    cQryTelefCli += " ) AS TELEFONES
    cQryTelefCli += " UNPIVOT (TELEFONE FOR COLUNASTEL IN (A1_TEL, A1_FAX, U5_FONE, U5_CELULAR, U5_FCOM1, U5_FCOM2, AGB_TELEFO)) AS TELUNPVT
    cQryTelefCli += " UNPIVOT (DDD FOR COLUNASDDD IN (A1_DDD, U5_DDD, AGB_DDD)) AS TELUNPVT2
    cQryTelefCli += " WHERE TELEFONE <> ''
    cQryTelefCli += " GROUP BY DDD, TELEFONE
    cQryTelefCli := ChangeQuery(cQryTelefCli)
    
    aTelefones := U_SqlToVet(cQryTelefCli)
    
Return aTelefones
